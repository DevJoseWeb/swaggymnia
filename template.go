// Code generated by go-bindata.
// sources:
// tmpl/swagger.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xc1\x8a\xdb\x30\x10\xbd\x07\xf2\x0f\x83\xc9\x71\x63\xc2\x1e\x0d\xbd\x6c\xb7\xec\x16\xba\x25\x94\xd0\xbb\x6a\x8f\x6d\xb1\x91\xe4\xce\xc8\xd9\x86\xc4\xff\x5e\x64\xd9\xb1\x14\x93\x2e\xf4\x50\x9a\x53\xf4\xe6\xcd\xd3\x7b\x9a\xc1\xfc\x26\xaa\x0a\x29\x83\xe4\x3e\xdd\x24\xcb\x85\xd4\xa5\xc9\x96\x0b\x80\x02\x39\x27\xd9\x58\x69\x74\x06\xc9\xe9\x04\xe9\x47\xa3\x4b\x59\xa5\x8f\x53\x01\xba\x2e\x71\xdc\x03\x12\xcf\x78\xdf\x3d\x38\x72\xac\xb4\x7b\x8c\x19\x3b\x07\xf9\x7a\x6d\xd8\xc6\xc5\x67\xc3\xd6\xd7\x7e\x08\xc6\xad\xb0\x75\x5c\x7f\x18\x50\xcf\xb1\xa2\xe2\x6c\xb9\x38\x9d\x80\x84\xae\x10\x56\xaf\x78\xbc\x83\xd5\x41\xec\x5b\x84\xec\x03\xa4\x9f\xb4\x95\x56\x22\x43\xd7\x2d\x17\x6b\xd0\x42\x0d\x66\x1c\x13\xce\xf0\x84\xf6\x89\x4c\xdb\x7c\x15\x0a\x47\xcb\xf1\x13\x24\xbd\x3c\xea\xa2\x97\xe0\xbc\x46\x85\xee\xce\x35\x24\xb5\xb5\x0d\x27\xcb\x45\x23\x6c\xed\x6d\xac\x63\x1f\x7d\x61\xee\x23\xe0\x39\xc6\x1d\xac\x08\xd9\xb4\x94\x63\x4f\x1e\xda\x1c\x13\xc0\x59\x75\x67\x38\xc3\x37\x54\xe6\xd0\x87\xdf\x12\x96\xf2\x57\xd7\xf5\x13\x73\x9c\xe9\xde\xd7\x40\xad\x17\x9b\xa4\xbd\xa0\x97\x1c\xd1\xf4\x05\x6d\x6d\x0a\x38\xc3\xce\x7c\x31\x6f\x48\x70\x51\x05\x18\x5e\xd7\x1f\xd6\xef\x3d\x9b\xfb\x71\xab\x94\xa0\xe3\xf0\xc4\x97\x4b\xae\x69\xce\xb0\x2c\xc1\x50\xc0\xf9\xac\xd9\x28\x2d\xc5\x56\x90\x50\x1c\x14\x1e\x4c\x71\x4c\x67\xe8\x33\x8a\x02\x69\x0a\x75\x11\xbd\x6a\x7c\x91\x0a\x77\xc7\x06\x03\x62\x6e\x34\xb7\x7e\x88\x00\x51\xb8\x9b\xad\x91\xf3\x71\x17\x3c\xd2\x38\x67\x68\x91\x26\xbd\x70\xbe\xfd\x16\x90\x50\xd1\x2c\xae\xc2\x4e\x62\xd1\x86\xfa\xbe\xe0\x72\x00\xe9\x36\xd2\xad\x43\x80\xd9\x63\xe3\x3a\xd8\x92\xd4\x55\x80\xcf\xd6\x78\x2c\x10\xfe\x6c\x25\x61\x91\x81\xa5\x16\x6f\x27\x7b\x3f\x46\x30\x9a\x3f\x65\x98\xcd\x7f\x08\x52\x1a\x52\x8f\xc2\x8a\xff\x23\xcc\xb0\x51\x7f\x13\xa4\xee\x5b\xff\x55\x8c\x18\x21\xe4\xc6\x68\x8e\xd6\xf9\x7e\xb3\x09\x4e\xd7\xd7\x72\x9b\xe7\xc8\x5c\xb6\x7b\x30\x0d\x92\x70\x70\x32\x7d\x49\x46\xf9\x5b\xff\x7f\x07\x00\x00\xff\xff\xb6\x39\x09\x71\x3b\x06\x00\x00")

func tmplSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmplSwaggerYaml,
		"tmpl/swagger.yaml",
	)
}

func tmplSwaggerYaml() (*asset, error) {
	bytes, err := tmplSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/swagger.yaml", size: 1595, mode: os.FileMode(438), modTime: time.Unix(1507644518, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/swagger.yaml": tmplSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"swagger.yaml": &bintree{tmplSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

